Курс Алгоритмы и структуры данных (GeekBrains)
Урок 06

Задание выполнено.

Сам граф реализовал классами Вершин(Node) и Ребер(Edge) и контейнера Графа(Graph), 
в котором они хранятся и который содержит методы поиска.

Релизованы:

1)поиск в ширину (BFS), через очередь.
	public bool BFS(int id)

	Во время поиска, вершины графа подсвечиваются разными цветами:
		СЕРЫЙ - необработанные вершины
		КРАСНЫЙ - вершины которые уже обработаны - сверено значение и оно не совпадает с искомым
		ПУРПУРНЫЙ - вершина в данный момент обрабатывается - сверяется искомое значение и помечаются 
			связанные с ней вершины (те которые еще не обработаны и не помечены) для дальнейшей обработки 
		ЖЕЛТЫЙ - вершина помечена для дальнейшей обработки, но еще не обработана
		ЗЕЛЕНЫЙ - вершина содержащая искомое значение (если найдено)
		
		Дополнительно справа от графа выводится текстом какая вершина обрабатывается и какие помечаются для дальнейшей обработки.
		
2)поиск в глубину	(DFS), через рекурсию
	public bool DFS(int id)
	private bool DFS(int id, Node element) (основной рекурсивный метод, вызывается из публичного)

	Во время поиска, вершины так же подсвечиваются разными цветам, но немного по другой логике
		СЕРЫЙ - необработанные вершины
		КРАСНЫЙ - вершины которая обработана полностью (тупик)
		ПУРПУРНЫЙ - вершина в данный момент обрабатывается, либо уже обработана, но в нее еще возможен возврат, для того чтобы пойти по другому пути
		ЗЕЛЕНЫЙ - вершина содержащая искомое значение (если найдено)

		Так же справа от графа дополнительно текстом выводится путь из вершины в вершину и шаги возврата по графу.

--------------

Для простоты, сделал так, что поиск все время начинается из нулевой вершины.
Так же для упрощения визуализации (а то там итак временами каша на экране), 
не стал добавлять к вершинам дополнительные данные для поиска. И поиск ведется просто по номерам вершин (id).

--------------

Граф который выводится на экран при старте, сделан хардкодом в коде программы. Но его можно изменить.
Пункт 3 в главном меню откроет меню редактирования графа, в котором можно добавить/удалить ребра между вершинами, 
а так же передвинуть нужные вершины или поменять их местами (все ребра будут отрисовываться интерактивно)
Так же можно создать полностью случайный граф. Правда я не осилил сделать, так чтобы он сразу получался красивый и развернутый на плоскости, 
поэтому придется вручную подвигать вершины, чтобы было красиво. Так же можно вернуть изначальный стандартный граф.

Дполонительно (не знаю зачем) сделал расцветку ребер в зависимости от их веса, но не придумал как это использовать, 
так что это пока просто для красоты и задел на будущее. В данной программе вес ребер никак не учитывается.

------------

При старте программы можно использовать следующие ключи командной строки:
-d <int> - величина задержки для визуализации алгоритмов поиска
-e <int> - количество вершин в рандомно создаваемом графе
-s <int> - seed для генератора случайных чисел
-h - справка по ключам командной строки

---- Задание ----

1. Модифицируйте DFS и BFS из предыдущего урока, но уже для графа, также с выводом каждого шага


    